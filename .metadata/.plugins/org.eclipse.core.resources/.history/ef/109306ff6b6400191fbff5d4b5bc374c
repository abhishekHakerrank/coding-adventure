package com.marsh.weather.service;

import java.net.URI;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.http.MediaType;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriTemplate;

import com.marsh.weather.model.WeatherEntry;
import com.marsh.weather.model.WeatherForecast;

@Service
public class WeatherService {

	
	private static final Logger logger = LoggerFactory.getLogger(WeatherService.class);
	private static final String WEATHER_FORECAST_URL = "https://api.openweathermap.org/data/2.5/forecast?zip={zipCode},us&appid={apiKey}";
	private final RestTemplate restTemplate;
	private static final String API_KEY = "80ac5f9d14dab30b4a36db9fa41e2a10";
	
	public WeatherService(RestTemplateBuilder restTemplateBuilder) {
		this.restTemplate = restTemplateBuilder.build();
	}
	public WeatherForecast weatherForecastData(String zipCode) {
		
		logger.info("Requesting weather forecast for {}/{}", zipCode);
		URI url = new UriTemplate(WEATHER_FORECAST_URL).expand(zipCode, API_KEY);
		//return weatherProcessor(invoke(url, WeatherForecast.class)); 
		return invoke(url, WeatherForecast.class);
	}
	
	
	private WeatherForecast weatherProcessor(WeatherForecast foreCast) {
		
		List<WeatherEntry> weatherEntry= foreCast.getEntries();
		for (WeatherEntry weatherEntry2 : weatherEntry) {
			System.out.println();
			/*if(null != weatherEntry2.getTimestamp()) {
				
				//Chronology dateOWAChrono = Chronology.from(weatherEntry2.getTimestamp());
				//Chronology dateCurrentChrono = Chronology.from(LocalDate.now());
				ChronoLocalDate dateOWA = weatherEntry2.getTimestamp();
				ChronoLocalDate dateCurrent = LocalDate.now();

				System.out.println("the condition checking");
				System.out.println("The condition check"+dateOWA.isBefore(dateCurrent.plus(Period.ofDays(2))));
				if(dateOWA.isAfter(dateCurrent) && dateOWA.isBefore(dateCurrent.plus(Period.ofDays(2)))) {
					
					weatherEntry2.setTempMax(weatherEntry2.getTempMax());
					weatherEntry2.setTempMin(weatherEntry2.getTempMin());


				
			}*/
	        

			System.out.println(weatherEntry2.getTimestamp()+"current date"+java.time.LocalDate.now());
			System.out.println("MaxTemp:"+weatherEntry2.getTempMax()+"  Min Temp:"+java.time.LocalDate.now());
			}	
		/*
		 * else { logger.info("Requesting weather forecast for {}/{}", "No Data Found");
		 * 
		 * }
		 */
		}
		return foreCast;
	}
	
	private <T> T invoke(URI url, Class<T> responseType) {
		RequestEntity<?> request = RequestEntity.get(url)
				.accept(MediaType.APPLICATION_JSON).build();
		ResponseEntity<T> exchange = this.restTemplate
				.exchange(request, responseType);
		return exchange.getBody();
	}
	
	
}
