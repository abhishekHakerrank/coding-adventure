package com.marsh.weather.controller;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.util.Assert;

import com.marsh.weather.model.WeatherForecast;
import com.marsh.weather.service.WeatherService;

	
	@RunWith(SpringRunner.class)
	@WebMvcTest(WeatherAppController.class)
	public class WeatherAppControllerTest {

		@MockBean
		private WeatherService weatherService;

		@Autowired
		private MockMvc mvc;
		@Autowired
		private WeatherAppController weatherAppController;
		
		@Before
	    public void setup(){
	        WeatherForecast responseMock = mock(WeatherForecast.class);
	        when(weatherService.weatherForecastData("20120")).thenReturn(responseMock);
	       
	    }
		
		 /**
	     * Positive scenario
	     */
	    @Test
	    public void getWeatherReportByZipCode() {
	    	WeatherForecast response = weatherAppController.getWeatherData("19406");

	        Assert.isTrue(response!= null, "response should not null");
	        Assert.isTrue(response.getCity().equals("Plano"), "City should be equals to Plano");
	        Assert.isTrue(response.getDate().equals("04-07-2019"), "date check");
	        Assert.isTrue(response.getZipCode().equals("19406"), "zip code check");
	        Assert.isTrue(response.getHourlyForecasts()!= null, "response should not null");
	        Assert.isTrue(response.getHourlyForecasts().get(0).getTemperature().equals(34.6), "temp check");
	    }

	    /**
	     * Negative scenario
	     */
	    @Test
	    public void getWeatherReportByZipCode_Negative() {
	        WeatherResponseVO response = weatherController.getWeatherReportByZipCode("2344423");
	        Assert.isTrue(response== null, "response should  be null");
	    }
}
